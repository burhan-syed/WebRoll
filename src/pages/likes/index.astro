---
import MainLayout from "../../layouts/MainLayout.astro";
import ColumnLayout from "../../layouts/ColumnLayout.astro";
import SmallSiteCard from "../../components/ui/SmallSiteCard";
import Refresh from "../../components/ui/buttons/Refresh";
import Paginator from "../../components/ui/buttons/Paginator";
import { checkAndReturnSessionID } from "../../server/utils/handleSession";
import prisma from "../../server/utils/prisma";
import "../../styles/globals.css";
import type { minSiteResData } from "../../types";
const { session, prev_session } = await checkAndReturnSessionID(Astro);
Astro.response.headers.set(
  "Set-Cookie",
  `webroll_session=${session}.${prev_session}; Secure; HttpOnly; Expires=${new Date(2147483647 * 1000).toUTCString()}; SameSite=Lax`
);
const { page } = Astro.params;
const NPage = +(page ?? 1);
const totalLikes = await prisma.likes.count({
  where: { sessionId: session, direction: true },
});

const likesPerPage = 10;
const likes = await prisma.likes.findMany({
  where: { sessionId: session, direction: true },
  select: {
    site: {
      select: {
        id: true,
        imgKey: true,
        url: true,
        name: true,
        description: true,
        allowEmbed: true,
        status: true,
        categories: { select: { category: true } },
      },
    },
  },
  orderBy: { date: "desc" },
  take: likesPerPage,
  skip: (NPage - 1) * likesPerPage,
});
const totalPages = Math.ceil(totalLikes / likesPerPage);
const pages = Array.from(Array(totalPages), (e, i) => {
  const pNum = i + 1;
  return (totalPages <= 7 ? pNum : NPage < 5 && pNum < 6) ||
    (totalPages - pNum < 5 && totalPages - NPage < 4)
    ? pNum
    : Math.abs(NPage - pNum) < 2
    ? pNum
    : pNum === 1 || pNum === totalPages
    ? pNum
    : -100;
}).filter((pNum, i) =>
  pNum > 0
    ? true
    : pNum === 1 || pNum === totalPages
    ? true
    : totalPages - i === 2 || i === 1
    ? true
    : false
);
---

<MainLayout
  skipCookies={true}
  noProse={true}
  SEOProps={{ title: "Likes | Webroll" }}
>
  <ColumnLayout grow={true}>
    <div
      class="flex flex-col p-4 flex-grow bg-base-100/90 backdrop-blur-md border-base-300 rounded-lg"
    >
      <h1 class="text-3xl mb-6 flex items-center justify-between gap-2">
        Likes<Refresh
          styles={"btn btn-ghost rounded-full group"}
          size={20}
          client:load
        />
      </h1>
      {
        !(likes.length > 0) ? (
          <span>no likes found</span>
        ) : (
          <>
            <ul class="flex flex-col gap-2">
              {likes.map(({ site }) => (
                <li>
                  <a rel="preload" href={`/sites/${site.id}`}>
                    <SmallSiteCard site={site as minSiteResData} />
                  </a>
                </li>
              ))}
            </ul>
          </>
        )
      }
    </div>
    {
      pages.length > 1 && (
        <div class="flex flex-col py-2 px-4 bg-base-100/90 backdrop-blur-md border-base-300 rounded-lg">
          <div class="btn-group mt-auto  mx-auto">
            <Paginator currentPage={NPage} pages={pages} route={"/likes/"} />
          </div>
        </div>
      )
    }
  </ColumnLayout>
</MainLayout>
