// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

enum SiteStatus {
  PARSING
  REVIEW
  APPROVED
  REPORTED
  REJECTED
  BANNED
}

enum TagStatus {
  REVIEW
  APPROVED
  REJECTED
}

enum ReportType {
  CATEGORY
  BROKEN
  TAGS
  TOS
  OTHER
  RESOLVED
}

enum SessionRole {
  BOT
  USER
  MOD 
  ADMIN 
  BANNED
}

model Sites {
  id          String       @id @unique @map("id") @db.VarChar(21)
  name        String
  url         String       @unique
  sourceLink  String?      @map("source_link")
  views       Int          @default(0)
  dislikes    Int          @default(0)
  reports     Int          @default(0)
  description String?      @db.Text
  allowEmbed  Boolean      @default(true) @map("allow_embed")
  privacy     Boolean      @default(false)
  adult       Boolean      @default(false)
  status      SiteStatus   @default(PARSING)
  submitterIP String       @map("submitter_ip") @db.VarChar(45)
  submitterID String       @map("submitted_id") @db.VarChar(48)
  submittedAt DateTime     @default(now()) @map("submitted_at")
  updatedAt   DateTime     @default(now()) @map("updated_at")
  imgKey      String?      @map("img_key")


  submitter   Sessions @relation(fields: [submitterID], references: [id])
  tags        SiteTags[]
  categories  Categories[]
  likes       Likes[]
  Reports     Reports[]
}

model Likes {
  id        Int      @id @unique @default(autoincrement())
  siteId    String   @map("site_id") @db.VarChar(21)
  ip        String   @db.VarChar(45)
  sessionId String   @db.VarChar(48)
  date      DateTime @default(now())
  direction Boolean  

  user     Sessions @relation(fields: [sessionId], references: [id])
  site     Sites       @relation(fields: [siteId], references: [id])

  @@unique([siteId, sessionId])
}

model Reports {
  id        Int    @id @unique @default(autoincrement())
  siteId    String @map("site_id") @db.VarChar(21)
  sessionId String @db.VarChar(48)
  ip   String   @db.VarChar(45)
  date DateTime @default(now())
  type ReportType
  categoryID Int?

  category Categories? @relation(fields: [categoryID], references: [id])
  user Sessions @relation(fields: [sessionId], references: [id])
  site Sites @relation(fields: [siteId], references: [id])

  @@unique([siteId, sessionId])
}

model Tags {
  tag String @unique @id @db.VarChar(48)
  createdAt DateTime @default(now()) @map("created_at")

  sites SiteTags[]
}

model SiteTags {
  siteID String 
  site Sites @relation(fields: [siteID], references: [id])
  tagID String @db.VarChar(48)
  tag Tags @relation(fields: [tagID], references: [tag])
  assignedAt DateTime @default(now())
  assignedBy String @db.VarChar(48)
  status TagStatus @default(APPROVED)
  assigner Sessions @relation(fields: [assignedBy], references: [id])

  @@id([siteID, tagID])
}

model Categories {
  id        Int      @id @unique @default(autoincrement()) @map("id")
  category  String   @unique @db.VarChar(24)
  createdAt DateTime @default(now()) @map("created_at")

  description String?
  sites       Sites[]
  reports     Reports[]
}

model Sessions {
  id        String   @id @unique @db.VarChar(48)
  createdAt DateTime @default(now()) @map("created_at")
  lastAccessed DateTime @default(now()) @map("last_accessed")
  expiresAt DateTime @default(now()) @map("expires_at")
  ip        String   @db.VarChar(45)
  role SessionRole @default(USER)


  sites Sites[]
  tags SiteTags[]
  likes Likes[]
  reports Reports[]
}
